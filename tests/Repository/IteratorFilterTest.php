<?php

namespace ByJG\AnyDataset\Repository;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-08-02 at 20:01:14.
 */
class IteratorFilterTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var IteratorFilter
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new IteratorFilter;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers ByJG\AnyDataset\Repository\IteratorFilter::getXPath
     * @todo   Implement testGetXPath().
     */
    public function testGetXPath()
    {
        $this->assertEquals('/anydataset/row', $this->object->getXPath());
        
        $this->object->addRelation('field', \ByJG\AnyDataset\Enum\Relation::EQUAL, 'test');
        $this->assertEquals("/anydataset/row[field[@name='field'] = 'test' ]", $this->object->getXPath());

        $this->object->addRelation('field2', \ByJG\AnyDataset\Enum\Relation::EQUAL, 'test2');
        $this->assertEquals("/anydataset/row[field[@name='field'] = 'test'  and field[@name='field2'] = 'test2' ]", $this->object->getXPath());
    }

    /**
     * @covers ByJG\AnyDataset\Repository\IteratorFilter::getSql
     * @todo   Implement testGetSql().
     */
    public function testGetSql()
    {
        $params = null;
        $returnFields = '*';
        $sql = $this->object->getSql('tablename', $params, $returnFields);
        $this->assertEquals([], $params);
        $this->assertEquals('select * from tablename ', $sql);

        $this->object->addRelation('field', \ByJG\AnyDataset\Enum\Relation::EQUAL, 'test');
        $sql = $this->object->getSql('tablename', $params, $returnFields);
        $this->assertEquals(['field' => 'test'], $params);
        $this->assertEquals('select * from tablename  where  field = [[field]]  ', $sql);

        $this->object->addRelation('field2', \ByJG\AnyDataset\Enum\Relation::EQUAL, 'test2');
        $sql = $this->object->getSql('tablename', $params, $returnFields);
        $this->assertEquals(['field' => 'test', 'field2' => 'test2'], $params);
        $this->assertEquals('select * from tablename  where  field = [[field]]  and  field2 = [[field2]]  ', $sql);
    }

    /**
     * @covers ByJG\AnyDataset\Repository\IteratorFilter::match
     * @todo   Implement testMatch().
     */
    public function testMatch()
    {

        $collection = [
            $row1 = new SingleRow(
            [
                'field' => 'value1',
                'field2' => 'value2'
            ]),

            $row2 = new SingleRow(
            [
                'field' => 'other1',
                'field2' => 'other2'
            ]),

            $row3 = new SingleRow(
            [
                'field' => 'last1',
                'field2' => 'last2'
            ])
        ];
        
        $this->assertEquals($collection, $this->object->match($collection));

        $this->object->addRelation('field2', \ByJG\AnyDataset\Enum\Relation::EQUAL, 'other2');
        $this->assertEquals([ $row2 ], $this->object->match($collection));

        $this->object->addRelationOr('field', \ByJG\AnyDataset\Enum\Relation::EQUAL, 'last1');
        $this->assertEquals([ $row2, $row3 ], $this->object->match($collection));


        //------------------------

        $this->object = new IteratorFilter();
        $this->object->addRelation('field', \ByJG\AnyDataset\Enum\Relation::EQUAL, 'last1');
        $this->object->addRelation('field2', \ByJG\AnyDataset\Enum\Relation::EQUAL, 'last2');
        $this->assertEquals([ $row3 ], $this->object->match($collection));

    }

    /**
     * @covers ByJG\AnyDataset\Repository\IteratorFilter::getFilter
     */
    public function testGetFilter()
    {
        // -------------------------
        // Will not test it. Covered in getSql and getXpath
        // -------------------------
    }

    /**
     * @covers ByJG\AnyDataset\Repository\IteratorFilter::addRelationOr
     * @todo   Implement testAddRelationOr().
     */
    public function testAddRelationOr()
    {
        $this->object->addRelation('field', \ByJG\AnyDataset\Enum\Relation::EQUAL, 'test');
        $this->object->addRelationOr('field2', \ByJG\AnyDataset\Enum\Relation::EQUAL, 'test2');
        $this->assertEquals("/anydataset/row[field[@name='field'] = 'test'  or field[@name='field2'] = 'test2' ]", $this->object->getXPath());

        $params = null;
        $returnFields = '*';
        $sql = $this->object->getSql('tablename', $params, $returnFields);
        $this->assertEquals(['field' => 'test', 'field2' => 'test2'], $params);
        $this->assertEquals('select * from tablename  where  field = [[field]]  or  field2 = [[field2]]  ', $sql);

    }

    /**
     * @covers ByJG\AnyDataset\Repository\IteratorFilter::startGroup
     * @todo   Implement testStartGroup().
     */
    public function testGroup()
    {
        $this->object->startGroup();
        $this->object->addRelation('field', \ByJG\AnyDataset\Enum\Relation::EQUAL, 'test');
        $this->object->addRelation('field2', \ByJG\AnyDataset\Enum\Relation::EQUAL, 'test2');
        $this->object->endGroup();
        $this->object->addRelationOr('field3', \ByJG\AnyDataset\Enum\Relation::EQUAL, 'test3');
        $this->assertEquals(
                "/anydataset/row[ ( field[@name='field'] = 'test'  and field[@name='field2'] = 'test2' ) or field[@name='field3'] = 'test3' ]",
                $this->object->getXPath()
        );

        $params = null;
        $returnFields = '*';
        $sql = $this->object->getSql('tablename', $params, $returnFields);
        $this->assertEquals(['field' => 'test', 'field2' => 'test2', 'field3' => 'test3'], $params);
        $this->assertEquals('select * from tablename  where  (  field = [[field]]  and  field2 = [[field2]] ) or  field3 = [[field3]]  ', $sql);
    }


}
