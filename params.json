{"name":"PHP Anydataset","tagline":"A data abstration layer in PHP with several repository types and standard interface.","body":"# AnyDataset\r\n[![Build Status](https://travis-ci.org/byjg/anydataset.svg?branch=master)](https://travis-ci.org/byjg/anydataset)\r\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/159bc0fe-42dd-4022-a3a2-67e871491d6c/mini.png)](https://insight.sensiolabs.com/projects/159bc0fe-42dd-4022-a3a2-67e871491d6c)\r\n\r\n## Description\r\n\r\nA data abstraction layer in PHP to manipulate any set of data with a standardized interface from any data source.\r\n\r\n## Features\r\n\r\n### Read an write* with a number of data sources accessed by a standardized interface ([see more here](docs/Connecting-to-Data-Sources.md)):\r\n* Array\r\n* Relational Databases (based on PDO)\r\n* DBLib (SQL Server php native - windows only)\r\n* OCI8 (Oracle php native interface)\r\n* Text files (fixed and delimeted like CSV)\r\n* Json documents\r\n* Xml documents\r\n* Sockets\r\n* [MongoDB](docs/Connecting-to-MongoDB.md)\r\n* SparQL\r\n\r\n## Examples\r\n\r\nThe easiest way to work is to get an repository and get an iterator for navigate throught the data.\r\n\r\n```php\r\n$repository = new TextFileDataset('myfile', ['field1', 'field2', 'field3'], TextFileDataset::CSVFILE);\r\n$iterator = $repository->getIterator();\r\n\r\n// and then:\r\nforeach ($iterator as $row) {\r\n    echo $row->getField('field1');  // or $row->toArray();\r\n}\r\n\r\n// Or \r\nprint_r($iterator->toArray());\r\n```\r\n\r\n### Cache results\r\n\r\nYou can easily cache your results with the CachedDBDataset class;\r\n\r\n```php\r\n$repository = new CachedDBDataset('connection', new \\ByJG\\Cache\\MemcachedEngine());\r\n$iterator = $repository->getIterator('select field1, field2 from sometable', 120); // cache for 2 minutes\r\n```\r\n\r\n### Relational database connections string based on URL\r\n\r\nThe connection string for relational databases is based on URL. Connect to mysql in the server localhost with user 'root'\r\nand password 'somepass' is easy as `mysql://root:somepass@localhost/schema`\r\n\r\nYou can store your connections string in the file `config/anydatasetconfig.php` like \r\n\r\n```php\r\nreturn [\r\n    'connections' => [\r\n        'development' => [\r\n            'url' => 'mysql://root:somepass@localhost/schema',\r\n            'type' => 'dsn'\r\n        ],\r\n        'staging' => [\r\n            'url' => 'mysql://root:otherpass@192.168.1.205:3307/schema',\r\n            'type' => 'dsn'\r\n        ]\r\n    ]\r\n];\r\n```\r\n\r\n### Load balance and connection pooling \r\n\r\nThe API have support for connection load balancing, connection pooling and persistent connection with \r\n[SQL Relay](http://sqlrelay.sourceforge.net/) library (requires install)\r\n\r\nYou only need change your connection string to:\r\n\r\n```\r\nsqlrelay://root:somepass@server/schema\r\n```\r\n\r\n### Object binding\r\n\r\n```php\r\nclass MyModel extends \\ByJG\\AnyDataset\\Model\\BaseModel\r\n{\r\n    protected $prop1;\r\n    public getProp1(){ ... };\r\n    public setProp1($value) { ... };\r\n}\r\n\r\n// And then you can bind values from another object or array\r\n$myModel = new MyModel($_REQUEST); // suppose that $_REQUEST['prop1'] exists\r\n```\r\n\r\n### Create DAL class easily\r\n   \r\n```php\r\nclass MyDAL extends BaseDBAccess\r\n{\r\n    public function getById($id)\r\n    {\r\n        return $this->getIterator('select * from sometable where id = :id', [ 'id' => $id ]);\r\n    }\r\n\r\n    // Some query need to be cached for 180 seconds\r\n    public function getExpensiveQuery()\r\n    {\r\n        return $this->getIterator('select * from expensive_query', null, 180);\r\n    }\r\n}\r\n```\r\n\r\n### And more\r\n\r\nAnd more...\r\n\r\n\r\n## Install\r\n\r\nJust type: `composer require \"byjg/anydataset=~1.0\"`\r\n\r\n## Running Tests\r\n\r\n```php\r\ncd tests\r\nphpunit --bootstrap bootstrap.php .\r\n```\r\n\r\n\r\n----\r\n[Open source ByJG](http://opensource.byjg.com)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}